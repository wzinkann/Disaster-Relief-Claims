package com.disasterrelief.intake.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.disasterrelief.intake.ClaimEventChannels;
import com.disasterrelief.intake.dto.ClaimResponseDto;
import com.disasterrelief.intake.dto.ClaimSubmissionDto;
import com.disasterrelief.intake.dto.ClaimStatusUpdateEvent;
import com.disasterrelief.intake.exception.ClaimNotFoundException;
import com.disasterrelief.intake.model.Claim;
import com.disasterrelief.intake.model.ClaimEvidence;
import com.disasterrelief.intake.repository.ClaimRepository;
import com.disasterrelief.intake.repository.specification.ClaimSpecifications;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class ClaimServiceImpl implements ClaimService {

    private final ClaimRepository claimRepository;
    private final ClaimEventChannels eventChannels;
    private final S3StorageService storageService;
    private final ClaimMapper claimMapper;
    
    @Autowired
    public ClaimServiceImpl(
        ClaimRepository claimRepository, 
        ClaimEventChannels eventChannels,
        S3StorageService storageService,
        ClaimMapper claimMapper) {
        this.claimRepository = claimRepository;
        this.eventChannels = eventChannels;
        this.storageService = storageService;
        this.claimMapper = claimMapper;
    }

    @Override
    @Transactional
    public ClaimResponseDto createClaim(ClaimSubmissionDto claimDto) {
        Claim claim = new Claim();
        
        // Generate unique ID with disaster prefix
        String claimId = Claim.generateClaimId(claimDto.getDisasterId());
        claim.setId(claimId);
        claim.setDisasterId(claimDto.getDisasterId());
        claim.setClaimantName(claimDto.getClaimantName());
        claim.setClaimantEmail(claimDto.getClaimantEmail());
        claim.setClaimantPhone(claimDto.getClaimantPhone());
        claim.setPropertyAddress(claimDto.getPropertyAddress());
        claim.setPostalCode(claimDto.getPostalCode());
        claim.setLatitude(claimDto.getLatitude());
        claim.setLongitude(claimDto.getLongitude());
        claim.setDamageDescription(claimDto.getDamageDescription());
        claim.setSubmissionDate(LocalDateTime.now());
        claim.setLastUpdated(LocalDateTime.now());
        
        Claim savedClaim = claimRepository.save(claim);
        
        // Publish claim submitted event to Kafka
        publishClaimSubmittedEvent(savedClaim);
        
        return claimMapper.toResponseDto(savedClaim);
    }
    
    @Override
    @Transactional
    public ClaimResponseDto addEvidenceToClaimId(String claimId, List<MultipartFile> files, String description) {
        Claim claim = claimRepository.findById(claimId)
                .orElseThrow(() -> new ClaimNotFoundException("Claim not found with ID: " + claimId));
        
        for (MultipartFile file : files) {
            try {
                // Upload file to S3
                String fileKey = "claims/" + claimId + "/evidence/" + file.getOriginalFilename();
                String fileUrl = storageService.uploadFile(fileKey, file);
                
                // Create evidence record
                ClaimEvidence evidence = new ClaimEvidence();
                evidence.setClaim(claim);
                evidence.setFileName(file.getOriginalFilename());
                evidence.setFileUrl(fileUrl);
                evidence.setFileType(file.getContentType());
                evidence.setDescription(description);
                evidence.setUploadedAt(LocalDateTime.now());
                
                // Add to claim
                claim.getEvidences().add(evidence);
                
            } catch (Exception e) {
                log.error("Failed to upload evidence file for claim {}: {}", claimId, e.getMessage());
                throw new RuntimeException("Failed to upload evidence file", e);
            }
        }
        
        claim.setLastUpdated(LocalDateTime.now());
        Claim updatedClaim = claimRepository.save(claim);
        
        return claimMapper.toResponseDto(updatedClaim);
    }
    
    @Override
    public ClaimResponseDto getClaimById(String claimId) {
        Claim claim = claimRepository.findById(claimId)
                .orElseThrow(() -> new ClaimNotFoundException("Claim not found with ID: " + claimId));
        return claimMapper.toResponseDto(claim);
    }
    
    @Override
    public List<ClaimResponseDto> searchClaims(
            String disasterId, String claimantEmail, String postalCode, Claim.ClaimStatus status) {
        
        List<Claim> claims = claimRepository.findAll(
            ClaimSpecifications.withFilters(disasterId, claimantEmail, postalCode, status));
        
        return claims.stream()
                .map(claimMapper::toResponseDto)
                .collect(Collectors.toList());
    }
    
    private void publishClaimSubmittedEvent(Claim claim) {
        try {
            log.info("Publishing claim submitted event for claim ID: {}", claim.getId());
            eventChannels.claimSubmittedOutput().send(
                MessageBuilder.withPayload(claimMapper.toClaimSubmittedEvent(claim)).build());
        } catch (Exception e) {
            log.error("Failed to publish claim submitted event: {}", e.getMessage());
            // Continue processing - we don't want to fail the API response if just the event fails
        }
    }
    
    @StreamListener(ClaimEventChannels.CLAIM_STATUS_UPDATED_INPUT)
    public void handleClaimStatusUpdate(ClaimStatusUpdateEvent event) {
        log.info("Received claim status update for claim {}: {} -> {}", 
                event.getClaimId(), event.getOldStatus(), event.getNewStatus());
        
        try {
            Claim claim = claimRepository.findById(event.getClaimId())
                    .orElseThrow(() -> new ClaimNotFoundException("Claim not found with ID: " + event.getClaimId()));
            
            claim.setStatus(event.getNewStatus());
            claim.setLastUpdated(LocalDateTime.now());
            claimRepository.save(claim);
            
            log.info("Updated claim {} status to {}", event.getClaimId(), event.getNewStatus());
        } catch (Exception e) {
            log.error("Failed to update claim status: {}", e.getMessage());
        }
    }
}
